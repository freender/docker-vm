networks:
  macvlan_eth0:
    external: true
  pw.internal: 
    name: pw.internal
    external: true
    
services:
  telegraf:
    container_name: telegraf      
    image: golift/telegraf
    network_mode: host
    environment:
      - TZ=America/New_York
      - HOST_PROC=/rootfs/proc
      - HOST_SYS=/rootfs/sys
      - HOST_ETC=/rootfs/etc
      - HOST_MOUNT_PREFIX=/rootfs  
    volumes:
      - /var/run/utmp:/var/run/utmp
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/rootfs
      - /sys:/rootfs/sys
      - /etc:/rootfs/etc  
      - /proc:/rootfs/proc
      - /mnt/ssdpool/appdata/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf 
      - /mnt/ssdpool/appdata/telegraf/scripts:/scripts
      - /run/udev:/run/udev
    user: telegraf:999
      # In bash run
      # echo $(stat -c '%g' /var/run/docker.sock)
      #user: telegraf:999
    restart: always
  grafana:
    networks:
        pw.internal:
    image: grafana/grafana:latest
    environment:
      TZ: 'America/New_York'
      PUID: 1000
      PGID: 1000
      GF_SERVER_ROOT_URL: ${GRAFANA_URL}
      GF_INSTALL_PLUGINS: victoriametrics-logs-datasource
    container_name: grafana
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.entryPoints: https
      traefik.http.routers.grafana.middlewares: auth@file,allow-cdn-and-local@file
      traefik.http.services.grafana.loadbalancer.server.port: 3000
    volumes:
      - /mnt/ssdpool/appdata/grafana:/var/lib/grafana
      - /mnt/ssdpool/appdata/grafana/config:/etc/grafana
    restart: always   
  uptime:
    networks:
        pw.internal:
    image: louislam/uptime-kuma:latest
    environment:
      TZ: 'America/New_York'
      PUID: 1000
      PGID: 1000
    container_name: uptime
    labels:
      traefik.enable: true
      traefik.http.routers.uptime.entryPoints: https
      traefik.http.routers.uptime.middlewares: auth@file,allow-cdn-and-local@file
      traefik.http.services.uptime.loadbalancer.server.port: 3001
    volumes:
      - /mnt/ssdpool/appdata/uptime:/app/data
    ports:
      - 3001:3001  # <Host Port>:<Container Port>
    restart: always

  traefik:
    container_name: traefik
    image: traefik:latest
    user: 1000:1000
    volumes:
      - /mnt/ssdpool/appdata/traefik/:/etc/traefik/
      - /mnt/ssdpool/appdata/traefik/plugins-storage:/plugins-storage
    labels:
      traefik.http.routers.api.rule: Host(`${TRAEFIK_URL}`)    # Define the subdomain for the traefik dashboard.
      traefik.http.routers.api.entryPoints: https    # Set the Traefik entry point.
      traefik.http.routers.api.service: api@internal    # Enable Traefik API.
      traefik.enable: true   # Enable Traefik reverse proxy for the Traefik dashboard.
      traefik.http.services.api.loadbalancer.server.port: 8183
      traefik.http.routers.api.middlewares: auth@file,allow-cdn-and-local@file
    environment:
      TZ: 'America/New_York'
      CF_DNS_API_TOKEN: ${TRAEFIK_DNS_API}
    restart: always 
    depends_on:
      - docker-socket-proxy
    networks:
        pw.internal:
        macvlan_eth0:
          ipv4_address: 10.0.40.45
          mac_address: "02:42:0a:00:28:2d"

  docker-socket-proxy:
    container_name: docker-socket-proxy
    image: tecnativa/docker-socket-proxy
    ports:
      - 2375:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - pw.internal
    environment:
      TZ: 'America/New_York'
      CONTAINERS: 1
      POST: 0
    privileged: true
    restart: always

  cloudflared:
    image: erisamoe/cloudflared
    container_name: cloudflared
    restart: always
    environment:
      TZ: 'America/New_York'    
    networks:
      - pw.internal
    volumes:
      - /mnt/ssdpool/appdata/cloudflared:/etc/cloudflared
    command: tunnel run ${CLOUDFLARE_TUNNEL_ID}


  auth-postgresql:
    image: ghcr.io/immich-app/postgres:17-vectorchord0.3.0
    restart: always
    container_name: auth-postgresql  
    user: 1000:1000
    volumes:
      - /mnt/ssdpool/appdata/auth-postgresql:/var/lib/postgresql/data
    environment:
      TZ: 'America/New_York'    
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
      POSTGRES_INITDB_ARGS: '--data-checksums'
   # env_file:
   #   - .env
    networks:
        pw.internal:

  auth-redis:
    container_name: auth-redis
    image: redis:alpine
    environment:
      TZ: 'America/New_York' 
    networks:
        pw.internal:
    expose:
      - 6379
    command: /bin/sh -c "redis-server --requirepass ${REDIS_PASS}"
    restart: always

  auth:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6}
    restart: always
    container_name: auth
    command: server
    user: 1000:1000
    environment:
      TZ: 'America/New_York'        
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_POSTGRESQL__HOST: auth-postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_REDIS__PASSWORD: ${REDIS_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      GEOIPUPDATE_LICENSE_KEY: ${GEOIPUPDATE_LICENSE_KEY}
      AUTHENTIK_AUTHENTIK__GEOIP: "/geoip/GeoLite2-City.mmdb"
      GEOIPUPDATE_ACCOUNT_ID: ${GEOIPUPDATE_ACCOUNT_ID}
    volumes:
      - /mnt/ssdpool/appdata/auth/media:/media
      - /mnt/ssdpool/appdata/auth/custom-templates:/templates
      - /mnt/ssdpool/appdata/geoipupdate:/geoip
    #env_file:
    #  - .env
    ports:
      - "0.0.0.0:${COMPOSE_PORT_HTTP:-9000}:9000"
      - "0.0.0.0:${COMPOSE_PORT_HTTPS:-9443}:9443"
    networks:
        pw.internal:
    labels:
      traefik.enable: true
      traefik.http.routers.auth.entryPoints: https
      traefik.http.routers.auth.middlewares: allow-cdn-and-local@file
      traefik.http.routers.auth.rule: Host(`${AUTH_URL}`) || HostRegexp(`{subdomain:[a-z0-9]+}.domain.com`) && PathPrefix(`/outpost.goauthentik.io/`)
  
  auth-worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6}
    restart: always
    container_name: auth-worker
    command: worker
    environment:
      TZ: 'America/New_York'    
      AUTHENTIK_REDIS__HOST: auth-redis
      AUTHENTIK_POSTGRESQL__HOST: auth-postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_REDIS__PASSWORD: ${REDIS_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    user: 1000:1000
    volumes:
      - /mnt/ssdpool/appdata/auth/media:/media
      - /mnt/ssdpool/appdata/auth/certs:/certs
      - /mnt/ssdpool/appdata/auth/custom-templates:/templates
    #env_file:
    #  - .env
    networks:
        pw.internal:

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    expose:
      - 8080
    environment:
      TZ: 'America/New_York'
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve firix/authentik"
      POSTOVERFLOWS: "crowdsecurity/rdns"
      GID: 1000
    volumes:
      - /mnt/ssdpool/appdata/crowdsec/data:/var/lib/crowdsec/data
      - /mnt/ssdpool/appdata/crowdsec:/etc/crowdsec
      - /mnt/ssdpool/appdata/traefik/logs:/var/log/traefik
    restart: always
    networks:
        pw.internal:
        
  traefik-logrotate:
    image: vegardit/traefik-logrotate:latest
    container_name: traefik-logrotate
    restart: always
    volumes:
      - /mnt/ssdpool/appdata/traefik/logs:/var/log/traefik:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw # required to send USR1 signal to Traefik after log rotation
    environment:
      TZ: "America/New_York"
      # all environment variables are optional and show the default values:
      LOGROTATE_LOGS: "/var/log/traefik/*.log" # log files to rotate, directory must match volume mount
      LOGROTATE_TRIGGER_INTERVAL: daily  # rotate daily, must be one of: daily, weekly, monthly, yearly
      LOGROTATE_TRIGGER_SIZE: 50M        # rotate if log file size reaches 50MB
      LOGROTATE_MAX_BACKUPS: 7          # keep 14 backup copies per rotated log file
      LOGROTATE_START_INDEX: 1           # first rotated file is called access.1.log
      CRON_SCHEDULE: "* * * * *"
      CRON_LOG_LEVEL: 8                  # see https://unix.stackexchange.com/a/414010/378036      
      # command to determine the id of the container running Traefik:
      TRAEFIK_CONTAINER_ID_COMMAND: docker ps --no-trunc --quiet --filter label=org.opencontainers.image.title=Traefik
      LOGROTATE_FILE_USER: 1000
      LOGROTATE_FILE_GROUP: 1000
      
  watchtower:
    container_name: watchtower
    restart: always
    environment:
      WATCHTOWER_SCHEDULE: 0 0 9 * * ?
      TZ: "America/New_York"
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_DEBUG: "false"
    image: ghcr.io/nicholas-fedor/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      
  apcupsd:
    image: ghcr.io/freender/apcupsd:main
    #build: https://github.com/freender/apcupsd.git
    #pull_policy: build
    hostname: Network
    container_name: apcupsd
    networks:
        pw.internal:    
    devices:
      - /dev/usb/hiddev0
    ports:
      - 13551:3551
    environment: # Delete or comment out any environment variables you don't wish to change
      TZ: "America/New_York" # Default value is Europe/London
      TELEGRAM_TOKEN: ${TELEGRAM_TOKEN} # Telegram BOT token
      TELEGRAM_CHATID: ${TELEGRAM_CHATID} # Telegram CHATID
    volumes:
      - /var/run/dbus/system_bus_socket:/var/run/dbus/system_bus_socket
    restart: always

  geoipupdate:
    container_name: geoipupdate
    image: ghcr.io/maxmind/geoipupdate
    user: 1000:1000
    restart: always
    environment:
      TZ: 'America/New_York' 
      GEOIPUPDATE_ACCOUNT_ID: ${GEOIPUPDATE_ACCOUNT_ID}
      GEOIPUPDATE_LICENSE_KEY: ${GEOIPUPDATE_LICENSE_KEY}
      GEOIPUPDATE_EDITION_IDS: 'GeoLite2-ASN GeoLite2-City GeoLite2-Country'
      GEOIPUPDATE_FREQUENCY: '72'
    networks:
        pw.internal:
    volumes:
      - /mnt/ssdpool/appdata/geoipupdate:/usr/share/GeoIP

  mwbot:
    image: ghcr.io/freender/mwbot:main
    user: 1000:1000
    #build: https://github.com/freender/MWBot.git
    container_name: mwbot
    environment:
      - TZ=America/New_York
      - TOKEN=${TELEGRAM_TOKEN} # Set telegram bot token
      - KUMA_HOST=${UPTIME_HOST} # UptimeKuma IP address and port
      - KUMA_LOGIN=${UPTIME_LOGIN} # UptimeKuma Login
      - KUMA_PASSWORD=${UPTIME_PASSWORD} # UptimeKuma Password
      - KUMA_MW_ID=3 # ID of MW you would like to start
      - CHAT_ID=${TELEGRAM_CHATID} # Set telegram chat id
      - OWNER=${TELEGRAM_OWNER} # Set user id
      - TOKEN_STAGING=${TELEGRAM_TOKEN_STAGING} # Debug - Set telegram bot token
      - WAF_TOKEN=${MW_BOT_WAF_TOKEN} # Debug - WAF token
      - WAF_ZONE=${MW_BOT_WAF_ZONE} # Debug - WAF zone
      - WAF_RULESET=${MW_BOT_WAF_RULESET} # Debug - WAF ruleset
      - WAF_RULEID=${MW_BOT_WAF_RULEID} # Debug - WAF ruleid
      - MW_BOT_ASN_DEFAULT=${MW_BOT_ASN_DEFAULT} # Debug - WAF ruleid
      - CDN_URL=${CDN_URL} # Debug - CDN URL
      - TELEGRAM_AUTH_USERS=${TELEGRAM_AUTH_USERS} # Debug - TELEGRAM_AUTH_USERS
    restart: always
    networks:
        pw.internal:
    # temp volume for debug
    volumes:
      - /mnt/ssdpool/appdata/mwbot/MWBot:/code/staging
      - /mnt/ssdpool/appdata/mwbot/config:/config

  cloudfirewall:
    image: ghcr.io/freender/cloudfirewall:main
    #build: https://github.com/freender/cloudfirewall.git
    container_name: cloudfirewall
    environment:
      - TZ=America/New_York
      - WAF_TOKEN=${CF_BOT_WAF_TOKEN} # Cloudflare WAF token
      - WAF_ZONE=${CF_BOT_WAF_ZONE} # Cloudflare WAF zone
      - WAF_RULESET=${CF_BOT_WAF_RULESET} # Cloudflare WAF ruleset
      - WAF_RULEID=${CF_BOT_WAF_RULEID} # Cloudflare WAF rule id
    restart: always
    networks:
        pw.internal:
        
  homeassistant:
    container_name: homeassistant
    image: "lscr.io/linuxserver/homeassistant:latest"    
    environment:
      TZ: 'America/New_York'
      PUID: 1000
      PGID: 1000
    labels:
      traefik.enable: true
      traefik.http.routers.homeassistant.entryPoints: https
      traefik.http.routers.homeassistant.middlewares: allow-cdn-and-local@file
      traefik.http.services.homeassistant.loadbalancer.server.port: 8123
    volumes:
      - /mnt/ssdpool/appdata/homeassistant:/config
      #- /etc/localtime:/etc/localtime:ro
      #- /run/dbus:/run/dbus:ro
    restart: always
    networks:
        pw.internal:
        macvlan_eth0:
          ipv4_address: 10.0.40.46
          mac_address: "02:42:0a:00:28:2e"

  syncthing:
    container_name: syncthing
    image: lscr.io/linuxserver/syncthing    
    hostname: pi-docker
    labels:
      traefik.enable: true
      traefik.http.routers.syncthing.entryPoints: https
      traefik.http.routers.syncthing.middlewares: auth@file,allow-cdn-and-local@file
      traefik.http.services.syncthing.loadbalancer.server.port: 8384
    ports:
      - 8384:8384
      - 22000:22000
      - 21027:21027
    environment:
      - TZ=America/New_York
      - PUID=1000
      - PGID=1000
    volumes:
      - /mnt/ssdpool/appdata/syncthing:/config
      - /mnt/ssdpool/backup:/backup
      - /mnt/ssdpool/unraid:/unraid
    restart: always
    networks:
        pw.internal:

  adguard-sync:
    image: lscr.io/linuxserver/adguardhome-sync:latest
    container_name: adguard-sync
    labels:
      traefik.enable: true
      traefik.http.routers.adguard-sync.entryPoints: https
      traefik.http.routers.adguard-sync.middlewares: auth@file,allow-cdn-and-local@file
      traefik.http.services.adguard-sync.loadbalancer.server.port: 8080
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - CONFIGFILE=/config/adguardhome-sync.yaml #optional
    volumes:
      - /mnt/ssdpool/appdata/adguard-sync/config:/config
    restart: always
    networks:
        pw.internal:

  adguard:
    image: adguard/adguardhome
    container_name: adguard
    user: 1000:1000
    labels:
      traefik.enable: true
      traefik.http.routers.adguard.entryPoints: https
      traefik.http.routers.adguard.middlewares: auth@file,allow-cdn-and-local@file
      traefik.http.services.adguard.loadbalancer.server.port: 80    
    environment:      
      TZ: 'America/New_York' 
    volumes:
      - /mnt/ssdpool/appdata/adguard/config:/opt/adguardhome/conf # app configuration
      - /mnt/ssdpool/appdata/adguard/work:/opt/adguardhome/work # app working directory                
    restart: always    
    networks:
        pw.internal:     
        macvlan_eth0:
          ipv4_address: 10.0.40.41
          mac_address: "02:42:0a:00:28:29"
  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    networks:
        pw.internal:
    restart: always
    environment:      
      TZ: 'America/New_York'     
    volumes:
      - "/var/log:/var/log"
      - "/mnt/ssdpool/appdata/traefik/logs:/traefik/logs"
      - "/mnt/ssdpool/appdata/geoipupdate:/etc/alloy/geoip"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/mnt/ssdpool/appdata/alloy/config.alloy:/etc/alloy/config.alloy"
      - "/mnt/ssdpool/appdata/alloy/endpoints.json:/etc/alloy/endpoints.json"
    command: [
      "run",
      "--server.http.listen-addr=0.0.0.0:12345",
      "/etc/alloy/config.alloy",
    ]
